float3 SrgbToLinear(float3 value)
{
    const float SrgbGamma = 2.2;
    return pow(abs(value), SrgbGamma);
}
float3 LinearToSrgb(float3 value)
{
    const float InvSrgbGamma = 1.0 / 2.2;
    return pow(abs(value), InvSrgbGamma);
}

float3 Reinhard(float3 color)
{
	float white = 2;
	float luma = dot(color, float3(0.2126, 0.7152, 0.0722));
	float toneMappedLuma = luma * (1 + luma / (white*white)) / (1 + luma);
	color *= toneMappedLuma / luma;
	color = pow(color, float3(1,1,1) / 2.2);
	return color;
}

float3 Filmic(in float3 color)
{
    color = max(0, color - 0.004f);
    color = (color * (6.2f * color)) / (color * (6.2f * color + 1.7f)+ 0.06f);
    return color;
}

float2 yccLookup(float x)
{
    float v9 = 1.5;
    float samples = 32;
    float scale = 1.0 / samples;
    float i = x * 16 * samples;
    float v11 = exp(-i * scale);
    float v10 = pow(1.0 - v11, v9);
    v11 = v10 * 2.0 - 1.0;
    v11 *= v11;
    v11 *= v11;
    v11 *= v11;
    v11 *= v11;

    return float2(v10, v10 * (samples / i) * (1.0 - v11));
}

float3 yccToneMap(float3 c)
{
    float4 color;
    color.rgb = c;

    color.y = dot(color.rgb, float3(0.30, 0.59, 0.11));
    color.rb -= color.y;
    color.yw = yccLookup(color.y * 1 * 0.0625);
    color.rb *= 1 * color.w;
    color.w = dot(color.rgb, float3(-0.508475, 1.0, -0.186441));
    color.rb += color.y;
    color.g = color.w;

    return color.rgb;
}

float3 linearToneMapping(float3 color)
{
	float exposure = 1.0;
	color = clamp(exposure * color, 0.0, 1.0);
	color = pow(color, float3(1,1,1) / 2.2);
	return color;
}

static const float3x3 ACESInputMat =
{
    {0.59719, 0.35458, 0.04823},
    {0.07600, 0.90834, 0.01566},
    {0.02840, 0.13383, 0.83777}
};

static const float3x3 ACESOutputMat =
{
    { 1.60475, -0.53108, -0.07367},
    {-0.10208,  1.10813, -0.00605},
    {-0.00327, -0.07276,  1.07602}
};

float3 RRTAndODTFit(float3 v)
{
    float3 a = v * (v + 0.0245786f) - 0.000090537f;
    float3 b = v * (0.983729f * v + 0.4329510f) + 0.238081f;
    return a / b;
}

float3 ACESFitted(float3 color)
{
    color = mul(ACESInputMat, color);
    color = RRTAndODTFit(color);
    color = mul(ACESOutputMat, color);

    return color;
}

float GTTonemap(float x) 
{
	float m = 0.22; // linear section start
	float a = 1.0;  // contrast
	float c = 1.33; // black brightness
	float P = 1.0;  // maximum brightness
	float l = 0.4;  // linear section length
	float l0 = ((P-m)*l) / a; // 0.312
	float S0 = m + l0; // 0.532
	float S1 = m + a * l0; // 0.532
	float C2 = (a*P) / (P - S1); // 2.13675213675
	float L = m + a * (x - m);
	float T = m * pow(x/m, c);
	float S = P - (P - S1) * exp(-C2*(x - S0)/P);
	float w0 = 1 - smoothstep(0.0, m, x);
	float w2 = (x < m+l)?0:1;
	float w1 = 1 - w0 - w2;
	return float(T * w0 + L * w1 + S * w2);
}

float3 GTTonemap(float3 x) 
{
	return float3
	(
		GTTonemap(x.r),
		GTTonemap(x.g),
		GTTonemap(x.b)
	);
}

float3 ToneMapping(float3 Color)
{
		Color *= Exposure + ExposureA - ExposureB;	
		Color = pow(Color, Gamma + GammaA - GammaB);
		
		float luminance = dot(Color, float3(0.299, 0.587, 0.114));
		float3 desaturatedcolor = float3(luminance, luminance, luminance);
		Color = lerp(desaturatedcolor, Color, Saturation + SaturationA - SaturationB);
		
		#if ToneMap == 1
			Color = LinearToSrgb(Color);
		#elif ToneMap == 2
			Color = Reinhard(Color);
		#elif ToneMap == 3
			Color = Filmic(Color);
		#elif ToneMap == 4
			Color = yccToneMap(Color);
		#elif ToneMap == 5
			Color = ACESFitted(Color);
		#elif ToneMap == 6	
		Color = GTTonemap(Color);
		#endif
		
		Color = saturate(Color);

	return Color;
}