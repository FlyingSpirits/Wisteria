#include "Wisteria/Core.fxsub"

#if Use_PBRMap == 1
Texture2D MaterialTexture < string ResourceName = Matt_Texture ;>;
sampler2D MaterialSampler = sampler_state 
{
	Texture = <MaterialTexture>;
    MINFILTER = Anisotropic;
    MAGFILTER = Anisotropic;
    MIPFILTER = Anisotropic;
    ADDRESSU  = Wrap;
    ADDRESSV  = Wrap;
	ADDRESSW  = Wrap;
};

Texture2D EmissionTexture <string ResourceName = Emit_Texture;>;
	sampler2D EmissionSampler = sampler_state 
{
	Texture = <EmissionTexture>;
    MINFILTER = Anisotropic;
    MAGFILTER = Anisotropic;
    MIPFILTER = Anisotropic;
    ADDRESSU  = Wrap;
    ADDRESSV  = Wrap;
	ADDRESSW  = Wrap;
};
#endif

#if Use_NormalMap == 1
Texture2D NormalTexture <string ResourceName = Nort_Texture;>;
	sampler2D NormalSampler = sampler_state 
{
	Texture = <NormalTexture>;
    MINFILTER = Anisotropic;
    MAGFILTER = Anisotropic;
    MIPFILTER = Anisotropic;
    ADDRESSU  = Wrap;
    ADDRESSV  = Wrap;
	ADDRESSW  = Wrap;
};
#endif

#if Use_ENVMap == 1
TextureCube EnvMapTexture < string ResourceName = EnvMap_Texture;>;
samplerCUBE EnvMapSampler = sampler_state 
{
	Texture = <EnvMapTexture>;
    MINFILTER = Anisotropic;
    MAGFILTER = Anisotropic;
    MIPFILTER = Anisotropic;
    ADDRESSU  = Clamp;
    ADDRESSV  = Clamp;
	ADDRESSW  = Clamp;
};
#endif

///////////////////////////////////////////////////////////////////////////
struct vs_in
{
	float4 Pos 		:POSITION0;
	float3 Normal	:NORMAL0;
	float4 UV1 		:TEXCOORD0;
	float4 UV2 		:TEXCOORD1;
	float4 UV3 		:TEXCOORD2;
	float4 UV4 		:TEXCOORD3;
};
	
struct vs_out
{
	float4 Pos		:SV_POSITION;
	float4 WPos		:TEXCOORD0;
	float4 PPos		:TEXCOORD1;
	float3 Normal	:NORMAL;
	float4 UV1		:TEXCOORD2;
	float4 UV2		:TEXCOORD3;
	float4 UV3		:TEXCOORD4;
	float4 UV4		:TEXCOORD5;
};
	
vs_out vs_shader(vs_in i, vs_out o)
{
	o.Pos = mul(i.Pos, WVP);
	o.WPos = mul(i.Pos, W);
	o.PPos = o.Pos;
	o.Normal = i.Normal;
	o.UV1 = i.UV1;
	o.UV2 = i.UV2;
	o.UV3 = i.UV3;
	o.UV4 = i.UV4;
	
	return o;
}

///////////////////////////////////////////////////////////////////////////
float4 ps_shader(vs_out i):COLOR0
{
	/////////////////////////////
	float4 Result;
	float4 Color;
	float4 DiffuseTex;
	float4 MaterialTex;
	float4 NormalTex;
	float4 EmissionTex;
	float RoughnessMask;
	float MetallicMask;
	float SpecularMask;
	float AmbientOcclusionMask;
	float FresnelMask;
	float SelfShadowMask;
	float3 EmissionMask;
	float3 BRDF;
	float3 DiffuseToon;
	float3 SpecularToon;
	float3 FresnelToon;
	float  Shadow;
	
	/////////////////////////////
	float3 dv1 = ddx(i.WPos);
	float3 dv2 = ddy(i.WPos);
	float2 duv1 = ddx(i.UV1);
	float2 duv2 = ddy(i.UV1);
	float direction = duv1.x * duv2.y - duv1.y * duv2.x > 0.0f ? 1.0f : -1.0f;
	float3 tangent = (dv1 * duv2.y - dv2 * duv1.y) * direction;
	float3 binormal = (dv2 * duv1.x - dv1 * duv2.x) * direction;
	
	float3 Normal = normalize(i.Normal);
		#if Use_NormalMap == 1
		NormalTex = tex2D(NormalSampler, i.UV1) * 2 - 1;
	
		Normal = normalize(
		normalize(tangent) * NormalTex.x + 
		normalize(binormal) * NormalTex.y +  
		normalize(Normal) * NormalTex.z);
		#endif
	
	/////////////////////////////
	float3 LightDir 	= normalize(-MMD_Light);
	float3 View 		= normalize(MMD_Camera - i.WPos);
	float3 HalfDir 		= normalize(LightDir + View);
	float  NdotV 		= dot(Normal, View);
	float  NdotL 		= dot(Normal, LightDir);
	float  NdotH 		= dot(Normal, HalfDir);
	float  HdotV 		= saturate(dot(HalfDir, View));
	float3 RefVec 		= 2 * saturate(NdotV) * Normal - View;
	float  NdotH_Toon 	= NdotH;
		#if Is_Hair == 1
		NdotH_Toon = dot(Normal, normalize(View + float3(0.0f, 1.0f, 0.0f)));
		#endif
	
	/////////////////////////////
	DiffuseToon = tex2D(PMXToon_Sampler, float2(NdotL * 0.5 + 0.5, 1));
	SpecularToon = tex2D(PMXToon_Sampler, float2(NdotH_Toon, 0.625));
	FresnelToon = tex2D(PMXToon_Sampler, float2(1 - NdotV, 0.325));
	
	DiffuseTex = tex2D(PMXDiffuse_Sampler, i.UV1);
	
	RoughnessMask = Roughness;
	MetallicMask = Metallic;
	SpecularMask = Specular;
	AmbientOcclusionMask = 1;
		#if Use_NormalMap == 1
		AmbientOcclusionMask = NormalTex.a;
		#endif
	FresnelMask = 1-RoughnessMask;
	SelfShadowMask = 0;
	EmissionMask = 1 * Emission_Color;

	#if Use_PBRMap == 1
		MaterialTex = tex2D(MaterialSampler, i.UV1);
		EmissionTex = tex2D(EmissionSampler, i.UV1);
	
		RoughnessMask = MaterialTex.r;
		MetallicMask = MaterialTex.g;
		SpecularMask = EmissionTex.a;
		FresnelMask = MaterialTex.a;
		SelfShadowMask = MaterialTex.b;
		EmissionMask = EmissionTex.rgb * Emission_Color;
	#endif
	
	/////////////////////////////
	Color = PMX_Diffuse * Diffuse_Color;
	
	Color *= DiffuseTex;
		
	#if UseVertexColor == 1
	Color.rgb *= lerp(1, i.UV3,VertexColor_RGB_Intensity);
	Color.a *= lerp(1,i.UV3,VertexColor_A_Intensity);
	#endif
	
	#if Alpha == 0
	Color.a = PMX_Diffuse.a * Diffuse_Color.a;
	#endif
	
	#if AlphaClip == 1
	clip(Color.a - 0.5);
	#endif
	
	#if ToneMap == 1
	Color.rgb = SrgbToLinear(Color);
	DiffuseToon.rgb = SrgbToLinear(DiffuseToon);
	FresnelToon.rgb = SrgbToLinear(FresnelToon);
	EmissionTex.rgb = SrgbToLinear(EmissionTex);
	#endif
	
	/////////////////////////////
	float3 Fresnel = FresnelToon * FresnelMask;
	float3 F0 = lerp(0.04, Color, MetallicMask);

	float3 F = FresnelSchlick(F0, HdotV) * saturate(NdotL);
	float D = TrowbridgeReitzNDF(NdotH, RoughnessMask);
	float G = SchlickGGXGeometricShadowingFunction(saturate(NdotL), NdotV, RoughnessMask);
	
	float3 SpecularLighting = (D * F * G) * NdotL * Specular_Color * SpecularMask;
		#if Is_Hair == 1
		SpecularLighting += SpecularToon * 0.5 * Specular_Color * SpecularMask;
		#endif
	
	float3 kd = lerp(1 - F, 0, MetallicMask);
	
	float3 DiffuseBRDF = (kd *Diffuse_Color);
	float3 AmbientBRDF = (kd *Ambient_Color);
	
	#if Use_ENVMap == 1
	float3 EnvMapTex  = texCUBElod(EnvMapSampler, float4(RefVec, RoughnessMask * 9));
		#if ToneMap == 1
		EnvMapTex = SrgbToLinear(EnvMapTex);
		#endif
	float2 SpecularBRDF = EnvBRDFApprox(saturate(NdotV), RoughnessMask);
	float3 EnvLighting = (F0 * SpecularBRDF.x + SpecularBRDF.y) * SpecularMask * AmbientOcclusionMask * EnvMapTex * Specular_Color.a;
	SpecularLighting += EnvLighting * Specular_Color;
	#endif
	
	float3 Diffuse = DiffuseBRDF * Color * DiffuseToon;
	float3 Ambient= AmbientBRDF * Color;
	float3 OutColor = Diffuse + Ambient;
	
	/////////////////////////////
	if(HgShadow_Valid)
		{
			Shadow = HgShadow_GetSelfShadowRate(i.PPos);
			Shadow = min(NdotL, Shadow);
			Shadow = lerp(0, lerp(Shadow, 1 , SelfShadowMask), saturate(NdotL));
		}
	else
		{
			Shadow = 1;
		}
		
	OutColor = lerp((OutColor * lerp(1,Color,ShadowIntensity)) * ShadowBrightness,OutColor,Shadow) * MMD_LightAmbient * 1.65;
	
	/////////////////////////////
	BRDF = lerp(OutColor, OutColor + EmissionMask, EmissionMask) + SpecularLighting + Fresnel * 0.5;
	
	/////////////////////////////
	Result.rgb = lerp(BRDF,ToneMapping(BRDF),saturate(ToneMap_Intensity));
	Result.a = Color.a; 
	
	return Result;
}

///////////////////////////////////////////ShadowsOFF///////////////////////////////////////////
technique Main < string MMDPass = "object"; >
	{
		pass Main 
		{
			#if SrcBlend == 0
				Srcblend = ZERO;
				#elif SrcBlend == 1
				Srcblend = ONE;
				#elif SrcBlend == 2
				Srcblend = SRCCOLOR;
				#elif SrcBlend == 3
				Srcblend = INVSRCCOLOR;
				#elif SrcBlend == 4
				Srcblend = SRCALPHA;
				#elif SrcBlend == 5
				Srcblend = INVSRCALPHA;
				#elif SrcBlend == 6
				Srcblend = DESTALPHA;
				#elif SrcBlend == 7
				Srcblend = INVDESTALPHA;
				#elif SrcBlend == 8
				Srcblend = DESTCOLOR;
				#elif SrcBlend == 9
				Srcblend = INVDESTCOLOR;
				#elif SrcBlend == 10
				Srcblend = SRCALPHASAT;
			#endif
			#if DstBlend == 0
				Destblend = ZERO;
				#elif DstBlend == 1
				Destblend = ONE;
				#elif DstBlend == 2
				Destblend = SRCCOLOR;
				#elif DstBlend == 3
				Destblend = INVSRCCOLOR;
				#elif DstBlend == 4
				Destblend = SRCALPHA;
				#elif DstBlend == 5
				Destblend = INVSRCALPHA;
				#elif DstBlend == 6
				Destblend = DESTALPHA;
				#elif DstBlend == 7
				Destblend = INVDESTALPHA;
				#elif DstBlend == 8
				Destblend = DESTCOLOR;
				#elif DstBlend == 9
				Destblend = INVDESTCOLOR;
				#elif DstBlend == 10
				Destblend = SRCALPHASAT;
			#endif
			#if Culling_Type  == 0
				Cullmode = CCW;
				#elif Culling_Type == 1
				Cullmode = CW;
				#elif Culling_Type == 2
				Cullmode = None;
			#endif
			#if ZWrite == 0
				ZWriteEnable = False;
				#elif ZWrite == 1
				ZWriteEnable = True;
			#endif
			VertexShader = compile vs_3_0 vs_shader();
			PixelShader  = compile ps_3_0 ps_shader();
		}
	}

///////////////////////////////////////////ShadowsON///////////////////////////////////////////
technique Main_SS < string MMDPass = "object_ss"; >
	{
		pass Main 
		{
			#if SrcBlend == 0
				Srcblend = ZERO;
				#elif SrcBlend == 1
				Srcblend = ONE;
				#elif SrcBlend == 2
				Srcblend = SRCCOLOR;
				#elif SrcBlend == 3
				Srcblend = INVSRCCOLOR;
				#elif SrcBlend == 4
				Srcblend = SRCALPHA;
				#elif SrcBlend == 5
				Srcblend = INVSRCALPHA;
				#elif SrcBlend == 6
				Srcblend = DESTALPHA;
				#elif SrcBlend == 7
				Srcblend = INVDESTALPHA;
				#elif SrcBlend == 8
				Srcblend = DESTCOLOR;
				#elif SrcBlend == 9
				Srcblend = INVDESTCOLOR;
				#elif SrcBlend == 10
				Srcblend = SRCALPHASAT;
			#endif
			#if DstBlend == 0
				Destblend = ZERO;
				#elif DstBlend == 1
				Destblend = ONE;
				#elif DstBlend == 2
				Destblend = SRCCOLOR;
				#elif DstBlend == 3
				Destblend = INVSRCCOLOR;
				#elif DstBlend == 4
				Destblend = SRCALPHA;
				#elif DstBlend == 5
				Destblend = INVSRCALPHA;
				#elif DstBlend == 6
				Destblend = DESTALPHA;
				#elif DstBlend == 7
				Destblend = INVDESTALPHA;
				#elif DstBlend == 8
				Destblend = DESTCOLOR;
				#elif DstBlend == 9
				Destblend = INVDESTCOLOR;
				#elif DstBlend == 10
				Destblend = SRCALPHASAT;
			#endif
			#if Culling_Type  == 0
				Cullmode = CCW;
				#elif Culling_Type == 1
				Cullmode = CW;
				#elif Culling_Type == 2
				Cullmode = None;
			#endif
			#if ZWrite == 0
				ZWriteEnable = False;
				#elif ZWrite == 1
				ZWriteEnable = True;
			#endif
			VertexShader = compile vs_3_0 vs_shader();
			PixelShader  = compile ps_3_0 ps_shader();
		}
	}

